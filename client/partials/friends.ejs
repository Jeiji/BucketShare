<html lang="en" >
   <head>

     <!-- Bootstrap -->
         <!-- Latest compiled and minified CSS -->
         <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">

         <!-- Optional theme -->
         <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css" integrity="sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp" crossorigin="anonymous">

         <!-- Latest compiled and minified JavaScript -->
         <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>

         <link rel="stylesheet" href="./style.css">

      <link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/angular_material/1.0.0/angular-material.min.css">
      <%# <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>%>
      <script src="angular/angular.js"></script>
      <script src="assets/app.js"></script>
      <script src="factories/usrFctry.js"></script>
      <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-animate.min.js"></script>
      <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-aria.min.js"></script>
      <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-messages.min.js"></script>
      <script src="https://ajax.googleapis.com/ajax/libs/angular_material/1.0.0/angular-material.min.js"></script>

      <link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/angular_material/1.0.0/angular-material.min.css">

      <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-animate.min.js"></script>
      <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-aria.min.js"></script>
      <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-messages.min.js"></script>
      <script src="https://ajax.googleapis.com/ajax/libs/angular_material/1.0.0/angular-material.min.js"></script>
      <script src="angular-route/angular-route.js"></script>
      <script src="angular-messages/angular-messages.js"></script>




	  <script language="javascript">
        angular
           .module('firstApplication', ['ngMaterial'])
           .controller('autoCompleteController', ['$http','$timeout','$q','$log','$scope',function autoCompleteController (http,$timeout, $q, $log,s) {

             logged = {};
             users = {};


          s.possibleFriends = {};

          var self=this;

          this.idxLogged = function(  ){
            let logged = {};
            http.get( '/chk_logged' ).then( function( loggedUsr ){
              console.log(`ABOUT TO LOG LOGGED USER`,loggedUsr.data);
              logged = loggedUsr.data
              console.log(logged);
              s.possibleFriends[logged.name] = true;
            })
            .catch( function( reason ){
              console.log(reason);
              console.log(`Handling the rejection...`);
            });
          };

          this.idxLogged()

          this.idx_F = function(  ){
            http.get( '/frndshps' ).then( function( res ){
              console.log('Returning to factory with friends...',res.data);
              let friendshipsToSkip = res.data;
              console.log(' Logging friendshipsToSkip ',friendshipsToSkip);
              for (let i = 0; i < friendshipsToSkip.length; i++) {

                  // if ( friendshipsToSkip[i].rec = logged ) {
                  //   let thisFriendsName = friendshipsToSkip[i].ref.name
                  //   console.log('Recipient. Sender:',thisFriendsName);
                  //   s.possibleFriends[thisFriendsName] = true;
                  // }else{
                  //   let thisFriendsName = friendshipsToSkip[i].rec.name
                  //   console.log('Sender. Recipient:',thisFriendsName);
                  //   s.possibleFriends[thisFriendsName] = true;
                  // }

                  if ( !(friendshipsToSkip[i].ref.name in s.possibleFriends)) {
                      s.possibleFriends[friendshipsToSkip[i].ref.name] = true
                  }
                  if ( !(friendshipsToSkip[i].rec.name in s.possibleFriends)) {
                      s.possibleFriends[friendshipsToSkip[i].rec.name] = true
                  }


              }
              self.states   = loadUsers();
            }).catch( function( reason ){
              console.log(reason);
              console.log(`Handling the rejection...`);
            });
          };

          this.idxUsers = function(  ){
            let dbUsers = [];
            http.get( '/usrs' ).then( function( res ){
              dbUsers = res.data;
              users = dbUsers
              console.log(users);
              self.idx_F();


            }).catch( function(reason){
              console.log(reason);
              console.log(`Handling rejection`);
            });

          };

          this.idxUsers();




           var self = this;
           self.simulateQuery = false;
           self.isDisabled    = false;
           // list of states to be displayed
           self.querySearch   = querySearch;
           self.selectedItemChange = selectedItemChange;
           self.searchTextChange   = searchTextChange;
           self.newState = newState;
           function newState(state) {
              alert("This functionality is yet to be implemented!");
           }
           function querySearch (query) {
              var results = query ? self.states.filter( createFilterFor(query) ) : self.states, deferred;
              if (self.simulateQuery) {
                 deferred = $q.defer();
                 $timeout(function () {
                       deferred.resolve( results );
                    },
		            Math.random() * 1000, false);
                 return deferred.promise;
              } else {
                 return results;
              }
           }
           function searchTextChange(text) {
              $log.info('Text changed to ' + text);
           }
           function selectedItemChange(item) {
              $log.info('Item changed to ' + JSON.stringify(item));
              s.selectedUser = item.value;
           }
           //build list of states as map of key-value pairs
           function loadUsers() {

             self.userNames = '';
             for (let i = 0; i < users.length; i++) {
               if ( !(users[i].name in s.possibleFriends )  ) {
                 console.log(s.possibleFriends);
                 console.log(users[i].name);
                 console.log('Not in!');

                 if ( !self.userNames ) {
                   console.log('last one!');
                   self.userNames += ( users[i].name)
                 }else{
                   console.log('not last one',i,users.length);
                   self.userNames += (', ' + users[i].name )
                }

              }
             }
             if (self.userNames) {


             console.log(self.userNames);
              return self.userNames.split(/, +/g).map( function (user) {
                 return {
                    value: user.toLowerCase(),
                    display: user
                 };
              });
              }
           }
           //filter function for search query
           function createFilterFor(query) {
              var lowercaseQuery = angular.lowercase(query);
              return function filterFn(state) {
                 return (state.value.indexOf(lowercaseQuery) === 0);
              };
           }


           s.reqFriend = function( selectedUser ){
             console.log( selectedUser );
             recUser = { userName: selectedUser }
             http.post( '/friendReq' , recUser ).then( function( res ){
               console.log(res.data);
             }).catch( function(reason){
               console.log(reason);
               console.log(`Handling rejection`);
             });
             self.idx_F();
           };




        }






        ]);
	  </script>
   </head>
   <nav class="navbar navbar-default header-bar">
     <div class="container-fluid">
       <div class="navbar-header">
         <a class="navbar-brand" href="#">
           <!-- <img alt="Brand" src="..."> -->
           <p class="">Onus</p>
         </a>
       </div>
       <a class=" on-orange btn btn-default navbar-right" href="/logout">LOGOUT</a>
       <ul class="nav navbar-nav">
           <li class=""><a href="/#!/buckets">HOME <span class="sr-only">(current)</span></a></li>
           <li class="active"><a href="">ADD FRIENDS</a></li>
         </ul>
     </div>
   </nav>

   <body ng-app="firstApplication" ng-cloak>
      <div ng-controller="autoCompleteController as ctrl" layout="column" ng-cloak>
        <h2>ADD A FRIEND! BANG!</h2>
         <md-content class="md-padding">
            <form ng-submit="$event.preventDefault()">
               <md-autocomplete
                  ng-disabled="ctrl.isDisabled"
                  md-no-cache="ctrl.noCache"
                  md-selected-item="ctrl.selectedItem"
                  md-search-text-change="ctrl.searchTextChange(ctrl.searchText)"
                  md-search-text="ctrl.searchText"
                  md-selected-item-change="ctrl.selectedItemChange(item)"
                  md-items="item in ctrl.querySearch(ctrl.searchText)"
                  md-item-text="item.display"
                  md-min-length="0"
                  placeholder="US State?">
                  <md-item-template>
                     <span md-highlight-text="ctrl.searchText" md-highlight-flags="^i">{{item.display}}</span>
                  </md-item-template>
                  <md-not-found>
                     <span ng-if="ctrl.userNames">No states matching "{{ctrl.searchText}}" were found.</span>
                     <span ng-if="!ctrl.userNames">You're friends with everyone, I guess, or requesting. Come back later when more sign up!</span>
                  </md-not-found>
               </md-autocomplete>
            </form>
            <md-button ng-click="reqFriend( selectedUser? selectedUser : ctrl.searchText )" class="md-raised">Button</md-button>
         </md-content>

      </div>
   </body>
</html>
